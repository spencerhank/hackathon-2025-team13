# This will create a flow like this:
#    Solace -> OpenAI -> Solace
#
# It will subscribe to `demo/question` and expect an event with the payload:
#
# The input message has the following schema:
# {
#   "text": "<question or request as text>"
# }
#
# It will then send an event back to Solace with the topic: `demo/question/response`
#
# Dependencies:
# pip install -U langchain_openai openai langchain-core~=0.3.0 langchain~=0.3.0
#
# required ENV variables:
# - OPENAI_API_KEY
# - OPENAI_API_ENDPOINT
# - OPENAI_MODEL_NAME
# - SOLACE_BROKER_URL
# - SOLACE_BROKER_USERNAME
# - SOLACE_BROKER_PASSWORD
# - SOLACE_BROKER_VPN

---
log:
  stdout_log_level: DEBUG
  log_file_level: DEBUG
  log_file: solace_ai_connector.log

shared_config:
  - broker_config: &broker_connection
      broker_type: solace
      broker_url: ${SOLACE_BROKER_URL}
      broker_username: ${SOLACE_BROKER_USERNAME}
      broker_password: ${SOLACE_BROKER_PASSWORD}
      broker_vpn: ${SOLACE_BROKER_VPN}

# Take from input broker and publish back to Solace
flows:
  # broker input processing
  - name: Simple template to LLM
    components:
      # Input from a Solace broker
      - component_name: solace_sw_broker
        component_module: broker_input
        component_config:
          <<: *broker_connection
          broker_queue_name: demothon_questions
          broker_subscriptions:
            - topic: demothon/search
              qos: 1
          payload_encoding: utf-8
          payload_format: text
      
      
      

      #
      # Do an LLM request
      #
      - component_name: llm_request
        component_module: openai_chat_model
        component_config:
          api_key: ${OPENAI_API_KEY}
          base_url: ${OPENAI_API_ENDPOINT}
          model: ${OPENAI_MODEL_NAME}
          temperature: 0.01
          response_format: text # options: text, json_object, or json_schema
          copy_user_properties: true
        input_transforms:
          - type: copy
            source_expression: |
              template:You are a helpful AI assistant. Please help with the user's request below:
              <user-question>
              {{text://input.payload}}
              </user-question>
            dest_expression: user_data.llm_input:messages.0.content
          - type: copy
            source_expression: static:user
            dest_expression: user_data.llm_input:messages.0.role
        input_selection:
          source_expression: user_data.llm_input


      # - component_name: stdout_output
      #   component_module: stdout_output
      #   input_transforms:
      #     - type: copy
      #       source_expression: previous
      #       dest_expression: user_data.output:payload
      #   input_selection:
      #     source_expression: input

      

      # Send response back to broker
      - component_name: send_response
        component_module: broker_output
        component_config:
          <<: *broker_connection
          payload_encoding: utf-8
          payload_format: json
        input_transforms:
          - type: copy
            source_expression: previous
            dest_expression: user_data.output:payload
          - type: copy
            source_expression: input.user_properties:aiConnectorReplyTo
            dest_expression: user_data.output:topic
        input_selection:
          source_expression: user_data.output